# -*- coding: utf-8 -*-
"""Albert DAC Introductory Workshop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ydyABC9-MHqA2IGtL_J_dWhyf9L70iN

# Objective

1. Data preparation and engineering
2. Map visualization library Folium
3. Preliminary analysis on the dataset

# Import data

*Required dependencies*

- pandas
- pyarrow / fastparquet
- folium
- branca (with folium)
"""

# mount drive to access files
#from google.colab import drive
# drive.mount('/content/drive')

# unzip "grab-posis-city=Jakarta.zip"

#from google.colab import drive
# drive.mount('/content/drive')

"""# Data preparation and engineering"""


import seaborn as sns
import matplotlib.pyplot as plt
from branca.element import Figure
from folium import plugins
import folium
import pandas as pd
import datetime
df = pd.read_parquet(
    "part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine='pyarrow')
# df1 = pd.read_parquet("/content/city=Jakarta/part-00001-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')
# df2 = pd.read_parquet("/content/city=Jakarta/part-00002-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')
# df3 = pd.read_parquet("/content/city=Jakarta/part-00003-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')
# df4 = pd.read_parquet("/content/city=Jakarta/part-00004-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')
#df5 = pd.read_parquet("/content/city=Jakarta/part-00005-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')
#df6 = pd.read_parquet("/content/city=Jakarta/part-00006-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')
#df7 = pd.read_parquet("/content/city=Jakarta/part-00007-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')
#df8 = pd.read_parquet("/content/city=Jakarta/part-00008-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')
#df9 = pd.read_parquet("/content/city=Jakarta/part-00009-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet", engine = 'pyarrow')

df = df0  # + df1 + df2 + df3 + df4 # + df5 + df6 + df7 + df8 + df9

"""Note that pingtimestamp is unix time, meaning that it is the number of seconds from 1 Jan 1970"""

# show full summary of data
df.info()

# functions to change dtypes


def to_category(df, *args):
    for col_name in args:
        df[col_name] = df[col_name].astype("category")


def to_float32(df, *args):
    for col_name in args:
        df[col_name] = df[col_name].astype("float32")


def to_uint16(df, *args):
    for col_name in args:
        df[col_name] = df[col_name].astype("uint16")


def to_int32(df, *args):
    for col_name in args:
        df[col_name] = df[col_name].astype("int32")


def format_datetime(df, col_name):
    # get datetime obj for all timestamps
    dt = df[col_name].apply(datetime.datetime.fromtimestamp)

    df["time"] = dt.apply(lambda x: x.time())
    df["day_of_week"] = dt.apply(lambda x: x.weekday())
    df["month"] = dt.apply(lambda x: x.month)
    df["year"] = dt.apply(lambda x: x.year)


# get a copy of the df
df_formatted = df.copy()

# format all columns
format_datetime(df_formatted, "pingtimestamp")
to_category(df_formatted, ["trj_id", "driving_mode", "osname"])
to_float32(df_formatted, ["rawlat", "rawlng", "speed", "accuracy"])
to_uint16(df_formatted, ["bearing", "day_of_week", "month", "year"])
to_int32(df_formatted, "pingtimestamp")

# check summary of df again
df_formatted.info()

"""There's a significant reduction in memory usage."""

df_formatted.describe(include="all")

"""# Map Visualization with Folium
"""


# latitude and longitude of Singapore
jkt_lat = -6.1754
jkt_lng = 106.8272

# create figure
fig = Figure(width=550, height=350)

# add map to figure
m = folium.Map(width=550, height=350,
               location=[jkt_lat, jkt_lng],
               zoom_start=11, min_zoom=1, max_zoom=16)
fig.add_child(m)

m

# create figure
fig = Figure(width=550, height=350)

# add map to figure
m = folium.Map(width=550, height=350,
               location=[jkt_lat, jkt_lng],
               zoom_start=11, min_zoom=11, max_zoom=16,
               tiles="Stamen Terrain")
# can use "Stamen Terrain", "Stamen Toner", "Mapbox Bright", "Mapbox Control Room"
fig.add_child(m)

m

example = df.iloc[0, ]

# create figure
fig2 = Figure(width=550, height=350)

# add map to figure
m2 = folium.Map(location=[jkt_lat, jkt_lng],
                tiles='cartodbpositron',
                zoom_start=11)
fig2.add_child(m2)

# add marker to the map
folium.Marker(location=[example["rawlat"], example["rawlng"]],
              popup='Default popup Marker1',
              tooltip='example').add_to(m2)

m2

fig3 = Figure(width=550, height=350)
m3 = folium.Map(location=[jkt_lat, jkt_lng],
                zoom_start=12, tiles="Stamen Terrain")

tooltip = "Click me!"

folium.Marker(
    [jkt_lat, jkt_lng], popup="<i>Mt. Hood Meadows</i>", tooltip=tooltip
).add_to(m3)
folium.Marker(
    [jkt_lat, jkt_lng], popup="<b>Timberline Lodge</b>", tooltip=tooltip
).add_to(m3)

fig3.add_child(m3)
m3

fig4 = Figure(width=550, height=350)
m4 = folium.Map(location=[jkt_lat, jkt_lng],
                zoom_start=12, tiles="Stamen Terrain")

folium.Marker(
    location=[jkt_lat, jkt_lng],
    popup="Mt. Hood Meadows",
    icon=folium.Icon(icon="cloud"),
).add_to(m4)

folium.Marker(
    location=[jkt_lat, jkt_lng],
    popup="Timberline Lodge",
    icon=folium.Icon(color="green"),
).add_to(m4)

folium.Marker(
    location=[jkt_lat, jkt_lng],
    popup="Some Other Location",
    icon=folium.Icon(color="red", icon="info-sign"),
).add_to(m4)

fig4.add_child(m4)

m4

"""# LatLong popup"""

fig5 = Figure(width=550, height=350)

m5 = folium.Map(location=[jkt_lat, jkt_lng], zoom_start=11)
m5.add_child(folium.LatLngPopup())

fig5.add_child(m5)
m5

fig5 = Figure(width=550, height=350)

m5 = folium.Map(width=550, height=350,
                location=[jkt_lat, jkt_lng],
                zoom_start=11, min_zoom=11, max_zoom=16,
                )

folium.Circle(
    radius=750,
    location=[1.2958, 103.7773],
    popup="NUS",
    color="#3186cc",
    fill=True,
    fill_color="#3186cc"
).add_to(m5)

fig5.add_child(m5)

m5

"""# Basic exploratory data analysis
"""


df_formatted

df_formatted['trj_id'].nunique()

df_formatted['trj_id'].value_counts()

"""Is there a huge difference between driving_mode?

Maybe motorcycles would have less delays than cars
"""

driving_modes = df_formatted.groupby('trj_id').apply(lambda x: x.iloc[0, 1])
sns.countplot(x=driving_modes)

"""Distribution of os

Different os might have different accuracy/bugs
"""

osnames = df_formatted.groupby('trj_id').apply(lambda x: x.iloc[0, 2])
sns.countplot(x=osnames)

sns.boxplot(data=df_formatted, x='osname', y='speed', showfliers=False)

"""Which period of time is the busiest?

7-10am? 5-7pm?

discretization
"""

hours = df_formatted['time'].apply(lambda x: x.hour)
sns.countplot(x=hours, color='black')

initial_pings = df_formatted.groupby('trj_id')['time'].min()
initial_pings_hours = initial_pings.apply(lambda x: x.hour)
sns.countplot(x=initial_pings_hours, color='salmon')

"""Geospatial plots"""

peak_period = df_formatted[(hours == 9) | (hours == 10)]

pings = peak_period[['rawlat', 'rawlng']].to_numpy()

pings

# create new figure
fig_peak_period = Figure(height=550, width=750)

# create new map
map_peak_period = folium.Map([jkt_lat, jkt_lng], zoom_start=11,
                             min_zoom=11, max_zoom=16)
fig_peak_period.add_child(map_peak_period)

# # create heatmap and add to map
plugins.HeatMap(pings, radius=1, blur=10).add_to(map_peak_period)

map_peak_period

# get mean speed of each trajectory
mean_speed = peak_period.groupby('trj_id')['speed'].agg(mean_speed=('mean'))

# extract trajectories with valid mean speed
mean_speed = mean_speed[mean_speed['mean_speed'].notnull()]

# sort by mean_speed
mean_speed.sort_values('mean_speed', inplace=True)

# retrieve slowest 3 trajectories
slowest_trajectories = mean_speed.nsmallest(3, columns='mean_speed').index

# function to get the lat and lng in an array given df and id


def get_route(df, trj_id):
    return df.query('trj_id == ' + f"'{trj_id}'").sort_values("pingtimestamp")[["rawlat", "rawlng"]]


route_1 = get_route(df_formatted, slowest_trajectories[0])
route_2 = get_route(df_formatted, slowest_trajectories[1])
route_3 = get_route(df_formatted, slowest_trajectories[2])

# function to get start and ending position of trajectory


def get_start_end_pos(trj):
    return (trj.iloc[0, :], trj.iloc[-1, :])


# create new figure
fig_trj = Figure(height=550, width=750)

# add map to figure
m_trj = folium.Map(location=[jkt_lat, jkt_lng],
                   tiles='cartodbpositron', zoom_start=11,
                   min_zoom=11, max_zoom=16)
fig_trj.add_child(m_trj)

# Creating feature groups
f1 = folium.FeatureGroup("Slowest")
f2 = folium.FeatureGroup("2nd Slowest")
f3 = folium.FeatureGroup("3rd Slowest")

# Adding lines to the different feature groups
line_1 = folium.vector_layers.PolyLine(route_1.values,
                                       popup='<b>Path of Vehicle_1</b>',
                                       tooltip='Slowest',
                                       color='blue', weight=1).add_to(f1)
line_2 = folium.vector_layers.PolyLine(route_2.values,
                                       popup='<b>Path of Vehicle_2</b>',
                                       tooltip='2nd Slowest',
                                       color='red', weight=1).add_to(f2)
line_3 = folium.vector_layers.PolyLine(route_3.values,
                                       popup='<b>Path of Vehicle_3</b>',
                                       tooltip='3rd Slowest',
                                       color='green', weight=1).add_to(f3)

# add ploylines to map
f1.add_to(m_trj)
f2.add_to(m_trj)
f3.add_to(m_trj)

# get start and end points of each trajectory
route_1_positions = get_start_end_pos(route_1)
route_2_positions = get_start_end_pos(route_2)
route_3_positions = get_start_end_pos(route_3)

# add markers for trj 1
folium.Marker(
    location=[route_1_positions[0][0], route_1_positions[0][1]],
    popup="start point",
    icon=folium.Icon(color="green"),
).add_to(f1)

folium.Marker(
    location=[route_1_positions[1][0], route_1_positions[1][1]],
    popup="start point",
    icon=folium.Icon(color="red"),
).add_to(f1)

# trj 2
folium.Marker(
    location=[route_2_positions[0][0], route_2_positions[0][1]],
    popup="start point",
    icon=folium.Icon(color="green"),
).add_to(f2)

folium.Marker(
    location=[route_2_positions[1][0], route_2_positions[1][1]],
    popup="start point",
    icon=folium.Icon(color="red"),
).add_to(f2)

# trj 3
folium.Marker(
    location=[route_3_positions[0][0], route_3_positions[0][1]],
    popup="start point",
    icon=folium.Icon(color="green"),
).add_to(f3)

folium.Marker(
    location=[route_3_positions[1][0], route_3_positions[1][1]],
    popup="start point",
    icon=folium.Icon(color="red"),
).add_to(f3)

# add layer control to toggle layers
folium.LayerControl().add_to(m_trj)

m_trj
